label = ~paste0(CTYUA24NM, ": ", format(total_population, big.mark = ","))
) %>%
addLabelOnlyMarkers(
data = county_centroids,
label = ~format(total_population, big.mark = ","),
labelOptions = labelOptions(noHide = TRUE, direction = "center", textOnly = TRUE,
style = list("color" = "black", "font-weight" = "bold",
"font-size" = "14px"))
)
options_map <- wards_with_pops %>%
select(c(WD25CD, WD25NM, LAD25CD, LAD25NM, OptionsAll, total, BH, OptionA, OptionB, OptionC, OptionD, Newhaven, BigMetro))
str(options_map)
library(sf)
library(dplyr)
# Group, sum population, and dissolve geometries
options_dissolved <- wards_with_pops %>%
group_by(OptionsAll) %>%
summarise(
total = sum(total, na.rm = TRUE),
geometry = st_union(geometry),
.groups = "drop"
)
library(leaflet)
library(dplyr)
# Optional: Create color palette (one color per group)
pal <- colorFactor("Set2", domain = options_dissolved$OptionsAll)
# Create map object and add each group manually
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Base Map")
# Loop through each OptionsAll value and add layer
for (option in unique(options_dissolved$OptionsAll)) {
map <- map %>%
addPolygons(
data = options_dissolved %>% filter(OptionsAll == option),
fillColor = ~pal(OptionsAll),
color = "white",
weight = 1,
fillOpacity = 0.7,
group = option,
label = ~paste0(OptionsAll, ": ", format(total, big.mark = ","))
)
}
# Add layer control
map <- map %>%
addLayersControl(
overlayGroups = unique(options_dissolved$OptionsAll),
options = layersControlOptions(collapsed = FALSE)
) %>%
addPolygons(
data = sussex_boundary,
fill = FALSE,
color = "black",
weight = 2,
group = "Sussex Boundary"
)
map
View(sussex_wards_data)
#| include: false
#sussex_wards_data <- st_read("data/sussex_wards_data.geojson")
sussex_wards_data <- st_read("data/sussex_wards_with_councillors.geojson")
#| echo: false
#| message: false
#| warning: false
#| include: false
library(tidyverse)
library(sf)
library(geojsonio)
library(geojsonsf)
library(leaflet)
library(tmap)
library(readr)
library(janitor)
#| echo: false
#| message: false
#| warning: false
#| include: false
# Define the URL for the GeoJSON file
#geojson_url <- "https://services1.arcgis.com/ESMARspQHYMw9BZ9/arcgis/rest/services/WD_MAY_2025_UK_BFC/FeatureServer/0/query?outFields=*&where=1%3D1&f=geojson"
gpkg_file_path <- "data/WD_MAY_2025_UK_BFC_865555711586926236.gpkg"
# Read the GeoJSON data into an sf object
# st_read can directly read from a URL
uk_bfc_data <- st_read(gpkg_file_path)
uk_county_UA <- st_read("data/Counties_and_Unitary_Authorities_December_2024_Boundaries_UK_BFC_3685449473335087295.gpkg")
sussex_boundary <- uk_county_UA %>%
filter(CTYUA24CD %in% c("E10000032", "E10000011", "E06000043")) %>%
st_transform(4326)
Sussex_Local_Authorities = c(
"Brighton and Hove","Eastbourne", "Hastings", "Lewes", "Rother", "Wealden", "East Sussex (County)", "Adur", "Arun", "Chichester", "Crawley", "Horsham", "Mid Sussex", "Worthing", "West Sussex (County)"
)
Sussex_ONS_Codes = c(
"E06000043", "E07000061", "E07000062", "E07000063", "E07000064", "E07000065", "E10000011",
"E07000223", "E07000224", "E07000225", "E07000226", "E07000227", "E07000228", "E07000229", "E10000032"
)
# Filter the data to include all specified Sussex Local Authorities
# We are now using the 'LAD25CD' column as requested.
sussex_wards_data <- uk_bfc_data %>%
filter(LAD25CD %in% Sussex_ONS_Codes)
# You can now work with 'brighton_hove_data' for further analysis or plotting.
# For example, to plot it:
# plot(st_geometry(brighton_hove_data))
#| echo: false
#| message: false
#| warning: false
#| include: false
csv_file_path <- "data/opencouncildata_councillors2025.csv"
councillors_data <- read_csv(csv_file_path)
councillors_data_cleaned <- councillors_data %>%
clean_names()
#| echo: false
#| message: false
#| warning: false
# Now, perform the pivoting operation
councillors_wide <- councillors_data_cleaned %>%
# Group by the unique identifiers for each row in the output
group_by(council, ward_name) %>%
# Create an index for each councillor within each ward
mutate(councillor_seq = row_number()) %>%
ungroup() %>% # Ungroup after creating the sequence
# Pivot the data to a wide format
pivot_wider(
id_cols = c(council, ward_name), # These columns will remain as identifying columns
names_from = councillor_seq, # The new columns will be suffixed with this sequence
values_from = c(
councillor_name,
next_election,
party_name,
electoral_commission_party_code
),
names_sep = "_" # This specifies how the new column names are created (e.g., councillor_name_1)
)
# Display the first few rows of the new wide format data frame
# You'll see one row per ward_name, with multiple columns for councillor details
# Define the list of councils to filter by
sussex_councils <- c("Eastbourne","Hastings","Lewes","Rother","Wealden","East Sussex","Adur","Arun", "Chichester", "Crawley","Horsham","Mid Sussex", "Worthing", "West Sussex", "Brighton and Hove")
# Create a new subset filtered on these councils
sussex_councillors_data <- councillors_wide %>%
filter(council %in% sussex_councils)
#| message: false
#| warning: false
#| include: false
wards_with_cllrs <- sussex_wards_data %>%
left_join(sussex_councillors_data,
by = c("LAD25NM" = "council", # Match council first
"WD25NM" = "ward_name")) # Then match ward name  # Ensure "LAD25NM" is
wards_with_cllrs_reprojected <- wards_with_cllrs %>%
st_transform(crs = 4326)
#st_write(wards_with_cllrs_reprojected, "sussex_wards_with_councillors.geojson", driver = "GeoJSON", delete_dsn = TRUE)
# Ensure wards_with_cllrs_reprojected is available (run the data preparation steps if not)
# (Previous code to define wards_with_cllrs_reprojected goes here)
# Combine all party name columns into a single vector
all_party_names <- c(
wards_with_cllrs_reprojected$party_name_1,
wards_with_cllrs_reprojected$party_name_2,
wards_with_cllrs_reprojected$party_name_3
)
# Get unique party names, excluding NA values
unique_party_names <- unique(all_party_names) %>%
na.omit() %>% # Remove NA values
sort()       # Optional: sort them alphabetically
# Print the list of unique party names
cat("List of unique party names across all councillor positions:\n")
print(unique_party_names)
# Optional: Get the number of unique parties
cat("\nNumber of unique parties found:", length(unique_party_names), "\n")
#| include: false
# Define a custom named color vector for parties
party_colors <- c(
"Brighton & Hove Independents" = "#DCDCDC",
"Conservative and Unionist" = "#0087DC",
"Green Party (E&W)" = "#02A95B",
"Independent / Other" = "grey60",
"Labour Party" = "#E4003B",
"Liberal Democrats" = "#FAA61A",
"Local Alliance" = "darkorange3",
"Reform UK" = "#12B6CF",
"Rother Assc Ind Cllrs" = "peru",
"Vacant" = "grey95"
)
#| include: false
#sussex_wards_data <- st_read("data/sussex_wards_data.geojson")
sussex_wards_data <- st_read("data/sussex_wards_with_councillors.geojson")
ward_pops <- read_csv("data/wd_2022_pop_ests.csv") %>% clean_names()
wards_with_pops <- sussex_wards_data %>%
left_join(ward_pops, by = c("LAD25CD" = "lad_2023_code", "WD25CD" = "ward_2023_code"))
#| eval: TRUE
#| echo: false
#| message: false
#| warning: false
#| include: false
library(nomisr)
c <- nomis_get_metadata(id = "NM_2014_1", concept = "geography")
# pop_data <- nomis_get_data(
#   id = "NM_2014_1",
#   time = "2022",
#   geography = "TYPE150",     # Wards
#   sex = 0,                   # Total (no gender breakdown)
#   c_age = 200,               # All ages
#   measures = 20100,          # Value only
#   tidy = TRUE,               # Clean snake_case format
#   exclude_missing = TRUE     # Skip nulls, useful if some wards are missing obs
# )
#write_csv(pop_data, "data/oa_pop_ests_2022.csv")
pop_data <- read_csv("data/oa_pop_ests_2022.csv")
#| echo: false
#| message: false
#| warning: false
library(leaflet)
# Define the color palette function
pal <- colorFactor("Set2", domain = sussex_wards_data$LAD25NM)
map1 <- leaflet(data = sussex_wards_data) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(
fillColor = ~pal(LAD25NM),
fillOpacity = 0.4,
color = "black",
weight = 0.5,
popup = ~paste0(
"<strong>Local Authority Name: </strong>", LAD25NM, "<br/>",
"<strong>ONS Code: </strong>", LAD25CD
),
label = ~LAD25NM
) %>%
# Sussex boundary overlay
addPolygons(
data = sussex_boundary,
fill = FALSE,
color = "black",
weight = 2,
group = "Sussex Boundary"
) %>%
# Add legend
addLegend(
position = "bottomright",
pal = pal,
values = ~LAD25NM,
title = "Local Authority",
opacity = 0.7
)
map1
#| echo: false
#| message: false
#| warning: false
# Make sure you have the 'leaflet' and 'htmltools' packages loaded
library(leaflet)
library(htmltools) # For custom controls and popups
# Crucial: Create a color palette function for Leaflet
# It maps the factor levels (party names) to the specified colors.
party_palette <- colorFactor(
palette = unname(party_colors), # Use the colors from your named vector
domain = names(party_colors)    # Use the names (party names) as the domain
)
# Filter data for party_name_2 and party_name_3 (only where not NA)
party_name_2_data <- wards_with_cllrs_reprojected %>% filter(!is.na(party_name_2))
party_name_3_data <- wards_with_cllrs_reprojected %>% filter(!is.na(party_name_3)) # New filter for party_name_3
# --- Leaflet Code with all three party layers ---
# Start the Leaflet map and add the base map and primary layer
leaflet_map <- leaflet(wards_with_cllrs_reprojected) %>%
addProviderTiles(providers$CartoDB.Positron, group = "Plain Map") %>%
# Add the polygon layer for party_name_1 (Primary Layer)
addPolygons(
fillColor = ~party_palette(party_name_1),
fillOpacity = 0.3,
color = "black", # Border color
weight = 0.5,    # Border width
popup = ~paste0(
"<b>Council:</b> ", LAD25NM, "<br>",
"<b>Ward:</b> ", WD25NM, "<br>",
"<b>Councillor 1 Party:</b> ", party_name_1, "<br>",
"<b>Councillor 1:</b> ", councillor_name_1, "<br>",
"<b>Councillor 2 Party:</b> ", party_name_2, "<br>",
"<b>Councillor 2:</b> ", councillor_name_2, "<br>",
"<b>Councillor 3 Party:</b> ", party_name_3, "<br>",
"<b>Councillor 3:</b> ", councillor_name_3
),
group = "Councillor 1 Party" # Group for layer control
)
# Conditionally add Layer 2: party_name_2
if (nrow(party_name_2_data) > 0) {
leaflet_map <- leaflet_map %>%
addPolygons(
data = party_name_2_data, # Use the filtered data for this layer
fillColor = ~party_palette(party_name_2),
fillOpacity = 0.3,
color = "transparent", # No border for overlay
weight = 0,
popup = ~paste0(
"<b>Council:</b> ", LAD25NM, "<br>",
"<b>Ward:</b> ", WD25NM, "<br>",
"<b>Councillor 1 Party:</b> ", party_name_1, "<br>",
"<b>Councillor 1:</b> ", councillor_name_1, "<br>",
"<b>Councillor 2 Party:</b> ", party_name_2, "<br>",
"<b>Councillor 2:</b> ", councillor_name_2, "<br>",
"<b>Councillor 3 Party:</b> ", party_name_3, "<br>",
"<b>Councillor 3:</b> ", councillor_name_3
),
group = "Councillor 2 Party" # Group for layer control
)
} else {
message("No wards found with a value for 'party_name_2'. Layer skipped in Leaflet.")
}
# Conditionally add Layer 3: party_name_3 (NEW LAYER)
if (nrow(party_name_3_data) > 0) {
leaflet_map <- leaflet_map %>%
addPolygons(
data = party_name_3_data, # Use the filtered data for this layer
fillColor = ~party_palette(party_name_3),
fillOpacity = 0.3,
color = "transparent", # No border for overlay
weight = 0,
popup = ~paste0(
"<b>Council:</b> ", LAD25NM, "<br>",
"<b>Ward:</b> ", WD25NM, "<br>",
"<b>Councillor 1 Party:</b> ", party_name_1, "<br>",
"<b>Councillor 1:</b> ", councillor_name_1, "<br>",
"<b>Councillor 2 Party:</b> ", party_name_2, "<br>",
"<b>Councillor 2:</b> ", councillor_name_2, "<br>",
"<b>Councillor 3 Party:</b> ", party_name_3, "<br>",
"<b>Councillor 3:</b> ", councillor_name_3
),
group = "Councillor 3 Party" # Group for layer control
)
} else {
message("No wards found with a value for 'party_name_3'. Layer skipped in Leaflet.")
}
# Continue adding the legend and layer controls to the updated leaflet_map object
leaflet_map <- leaflet_map %>%
# Add the legend for the primary layer (Party 1)
addLegend(
pal = party_palette,
values = names(party_colors),
title = "Party Representation",
position = "bottomright"
) %>%
# Add layer control to allow toggling of layers and base maps
addLayersControl(
baseGroups = c("Plain Map"), # Your plain basemap
overlayGroups = c("Councillor 1 Party", "Councillor 2 Party", "Councillor 3 Party"), # All three party layers as overlays
options = layersControlOptions(collapsed = FALSE) # Keep controls open
)
# Print the Leaflet map
leaflet_map
#| echo: false
#| message: false
#| warning: false
oa_centroids <- st_read("data/Output_Areas_2021_PWC_V3_5187587502528298152.gpkg") %>% st_transform(4326)
oa_centroid_pop <- oa_centroids %>%
left_join(pop_data, by = c("OA21CD" = "geography_code"))
oa_lut <- read_csv("data/Output_Area_(2021)_to_Ward_(2025)_to_LAD_(May_2025)_Best_Fit_Lookup_in_EW_v2.csv")
oa_centroid_pop <- oa_centroid_pop %>%
left_join(oa_lut, by = c("OA21CD" = "OA21CD"))
sussex_oa_pop <- oa_centroid_pop %>%
filter(LAD25CD %in% Sussex_ONS_Codes)
#| echo: false
#| message: false
#| warning: false
library(leaflet)
library(dplyr)
library(viridis)
# Create a filtered copy
sussex_oa_pop_filtered <- sussex_oa_pop %>%
filter(OA21CD != "E00184795")
# Enhance circle sizing for visual contrast
sussex_oa_pop_filtered <- sussex_oa_pop_filtered %>%
mutate(size = sqrt(obs_value) / 3.5)  # more dramatic scaling
# Reverse the RdYlBu palette
# Viridis colour palette
pal <- colorNumeric(palette = turbo(256), domain = sussex_oa_pop_filtered$obs_value)
# Build the leaflet map
leaflet(sussex_oa_pop_filtered) %>%
addProviderTiles(providers$CartoDB.Positron, group = "Plain Map") %>%
addCircleMarkers(
radius = ~size,
stroke = FALSE,
fillOpacity = 0.2,
color = ~pal(obs_value),
label = ~paste0("OA: ", OA21CD, "<br>Pop: ", obs_value)
) %>%
addLegend(
position = "bottomright",
title = "Population (obs_value)",
pal = pal,
values = ~obs_value,
opacity = 0.8
)
#| echo: false
#| message: false
#| warning: false
library(leaflet)
library(viridisLite)
# Create a colour palette based on total population
pal <- colorNumeric(palette = inferno(256), domain = wards_with_pops$total)
# Build the leaflet map
leaflet(wards_with_pops) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~pal(total),
weight = 1,
opacity = 1,
color = "white",
dashArray = "3",
fillOpacity = 0.7,
label = ~paste0(ward_2023_name, ": ", total, " people"),
highlightOptions = highlightOptions(
weight = 3,
color = "#666",
dashArray = "",
fillOpacity = 0.9,
bringToFront = TRUE
)
) %>%
addLegend(
position = "bottomright",
pal = pal,
values = ~total,
title = "Population (total)",
opacity = 0.7
)
#| echo: false
#| message: false
#| warning: false
library(dplyr)
library(knitr)
wards_no_geom <- wards_with_pops %>%
st_drop_geometry()
library(DT)
summary_table <- wards_no_geom %>%
group_by(OptionsAll) %>%
summarise(SumOfTotal = sum(total, na.rm = TRUE)) %>%
arrange(desc(SumOfTotal))
datatable(summary_table,
options = list(pageLength = 10, autoWidth = TRUE),
class = "compact stripe hover",
rownames = FALSE)
#| echo: false
#| message: false
#| warning: false
library(sf)
library(dplyr)
# Ensure both objects are in the same CRS
wards_with_pops <- st_transform(wards_with_pops, st_crs(sussex_boundary))
# Spatial join: attach county info to each ward
wards_with_county <- st_join(wards_with_pops, sussex_boundary[, c("CTYUA24CD", "CTYUA24NM")])
county_pops <- wards_with_county %>%
st_drop_geometry() %>%
group_by(CTYUA24CD, CTYUA24NM) %>%
summarise(total_population = sum(total, na.rm = TRUE))
sussex_boundary_with_pops <- sussex_boundary %>%
left_join(county_pops, by = c("CTYUA24CD", "CTYUA24NM"))
county_centroids <- st_centroid(sussex_boundary_with_pops)
leaflet(data = sussex_boundary_with_pops) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(
fillColor = ~colorNumeric("YlGnBu", total_population)(total_population),
color = "grey30",
weight = 1,
fillOpacity = 0.7,
label = ~paste0(CTYUA24NM, ": ", format(total_population, big.mark = ","))
) %>%
addLabelOnlyMarkers(
data = county_centroids,
label = ~format(total_population, big.mark = ","),
labelOptions = labelOptions(noHide = TRUE, direction = "center", textOnly = TRUE,
style = list("color" = "black", "font-weight" = "bold",
"font-size" = "14px"))
)
options_map <- wards_with_pops %>%
select(c(WD25CD, WD25NM, LAD25CD, LAD25NM, OptionsAll, total, BH, OptionA, OptionB, OptionC, OptionD, Newhaven, BigMetro))
str(options_map)
library(sf)
library(dplyr)
# Group, sum population, and dissolve geometries
options_dissolved <- wards_with_pops %>%
group_by(OptionsAll) %>%
summarise(
total = sum(total, na.rm = TRUE),
geometry = st_union(geometry),
.groups = "drop"
)
library(leaflet)
library(dplyr)
# Optional: Create color palette (one color per group)
pal <- colorFactor("Set2", domain = options_dissolved$OptionsAll)
# Create map object and add each group manually
map <- leaflet() %>%
addProviderTiles(providers$CartoDB.Positron, group = "Base Map")
# Loop through each OptionsAll value and add layer
for (option in unique(options_dissolved$OptionsAll)) {
map <- map %>%
addPolygons(
data = options_dissolved %>% filter(OptionsAll == option),
fillColor = ~pal(OptionsAll),
color = "white",
weight = 1,
fillOpacity = 0.7,
group = option,
label = ~paste0(OptionsAll, ": ", format(total, big.mark = ","))
)
}
# Add layer control
map <- map %>%
addLayersControl(
overlayGroups = unique(options_dissolved$OptionsAll),
options = layersControlOptions(collapsed = FALSE)
) %>%
addPolygons(
data = sussex_boundary,
fill = FALSE,
color = "black",
weight = 2,
group = "Sussex Boundary"
)
map
